import org.zkoss.zul.*
import org.zkoss.zkplus.databind.*
import org.apache.commons.logging.Log 
import org.apache.commons.logging.LogFactory
<% if (getPackageName(currentModelElement) != "") { %>
import ${getPackageName(currentModelElement)}.*
<% } %>
/**
 * ${currentModelElement.name} Window Object
 **/
class ${currentModelElement.name}Window extends Window{
	/**
	* Logger de la class ${currentModelElement.name}Window
	**/
	private Log logger = LogFactory.getLog(${currentModelElement.name}Window.class)
	<%
		def chars = currentModelElement.name.toCharArray()
		chars[0] = Character.toLowerCase(chars[0])
		def lowerNomClass = new String(chars)
	%>
	/**
	* liste de ${lowerNomClass}
	**/
	def ${lowerNomClass}s
	/**
	* ${lowerNomClass} selectionné
	**/
	def ${lowerNomClass}Selected
	/**
	* un nouveau element de ${lowerNomClass}  
	**/
	def ${lowerNomClass}
	
	<%
	getAssociationEnds(model, currentModelElement).each { sourceEnd ->
		def association = sourceEnd.association
		def targetEnd = association.connection.find { end -> end != sourceEnd }
		if (targetEnd.isNavigable()) {			
			def targetName = getEndName(targetEnd)
			if (isOneToOne(sourceEnd, targetEnd)) {  								
	%>
	/**
	* liste de ${targetName}
	**/
	def ${targetName}s	
	/**
	* ${targetName}  selectionné
	**/
	def ${targetName}Selected	
	<%
			}                 
			else if (isOneToMany(sourceEnd, targetEnd)) {   				
	%>
	/**
	* liste de ${targetName}
	**/
	def ${targetName}	
	/**
	* ${targetName}  selectionné
	**/
	def ${targetName}Selected
	<%			
			}                 
			else if (isManyToOne(sourceEnd, targetEnd)) { 
	%>
	/**
	* liste de ${targetName}
	**/	
	def ${targetName}s	
	/**
	* ${targetName}  selectionné
	**/
	def ${targetName}Selected
	<%			
			}
			else if (isManyToMany(sourceEnd, targetEnd)) {   
	%>
	/**
	* liste de ${targetName}
	**/
	def ${targetName}
	/**
	* ${targetName} selectionné
	**/
	def ${targetName}Selected
	<%			
			}
		} 
	}
	%>
	/**
	* Constructeur
	**/
	public ${currentModelElement.name}Window () {
        ${lowerNomClass}s = ${currentModelElement.name}.list()
        ${lowerNomClass}Selected = null
        ${lowerNomClass} = new ${currentModelElement.name}()
		initialiserAssociation()
    }   
    /**
	*  Cette fonction est appelée lorsque un élément de la liste est selectionné
	**/
	def select() {                    
        ${lowerNomClass} = ${lowerNomClass}Selected	
		afficherValeurAssociation()
        //${lowerNomClass}.lock()  //Ne peut etre utilisé que pour le base de donnée qui accepte le veruillage des enregisterments
        rafraichirField()
        activerBoutons(true)
    }
	/**
	* Fonction qui se charge de sauveguarder un nouveau élément de ${lowerNomClass}
	**/
    def add() {
		actualiserValeurAssociation()
        ${lowerNomClass}.validate()        
        if(!${lowerNomClass}.hasErrors()) {			
			try {
				${lowerNomClass}.save(flush:true)
			} catch(Exception ex) {
				logger.error "Error: \${ex.message}", ex
				Messagebox.show("Echec lors de la transaction", "Erreur", Messagebox.OK, Messagebox.ERROR)
			} finally {
				${lowerNomClass} = new ${currentModelElement.name}()
				rafraichirField()
				rafraichirList()
				activerBoutons(false)
			}
        } else {
            Messagebox.show("Les donnees saisies sont erronees", "Erreur", Messagebox.OK, Messagebox.ERROR)
        }
		//reinitialiserAssociation()
    }
	/**
	* Pour annuler la modification ou la supression et pour basculer en mode ajout d'un nouveau élément
	**/
    def cancel() {        
        ${lowerNomClass} = new ${currentModelElement.name}()
		reinitialiserAssociation(false)
        rafraichirField()
        activerBoutons(false)
        annulerSelection()
    }
	/**
	* Fonction qui se charge de mettre à jour un élément selectionné de ${lowerNomClass}
	**/
    def update() {
		actualiserValeurAssociation()
        ${lowerNomClass}.validate()
        if(!${lowerNomClass}.hasErrors()) {
            try {
                //${lowerNomClass}.save()
                ${lowerNomClass}.merge(flush:true)
            }
            catch(org.springframework.dao.OptimisticLockingFailureException e) {
			logger.error "Error: \${e.message}", e
                Messagebox.show("Probleme acces concurrent", "Erreur", Messagebox.OK, Messagebox.ERROR)
            }
			catch(Exception ex) {
				logger.error "Error: \${ex.message}", ex
				Messagebox.show("Echec lors de la transaction", "Erreur", Messagebox.OK, Messagebox.ERROR)
			}
			finally {
                activerBoutons(false)
                ${lowerNomClass} = new ${currentModelElement.name}()                
                rafraichirField()
                rafraichirList()
            }
        } else {
            Messagebox.show("Echec de l'operation", "Erreur", Messagebox.OK, Messagebox.ERROR);
        } 
		//reinitialiserAssociation()
    }
	/**
	* Fonction qui se charge de supprimer un élément selectinné de ${lowerNomClass}
	**/
    def delete() {
        ${lowerNomClass}.delete(flush:true)
        activerBoutons(false)
        ${lowerNomClass} = new ${currentModelElement.name}()
        rafraichirField()
        rafraichirList()
		reinitialiserAssociation(true)
    }
	/**
	* Permet d'afficher l'anglet d'ajout d'un nouveau ${lowerNomClass}
	**/
    def newRecord(){
        this.getFellow("westPanel").open = visible
    }
	/**
	* Activer ou désactiver les boutons d'ajout, suppression, modfication
	**/
    def activerBoutons(visible) {
        this.getFellow("btnUpdate").visible = visible
        this.getFellow("btnDelete").visible = visible
        this.getFellow("btnCancel").visible = visible
        this.getFellow("btnSave").visible = !visible
        this.getFellow("btnNew").visible = !visible
        this.getFellow("westPanel").open = visible        
    }
	/**
	* Réinitialiser les champs du formulaire
	**/
    def rafraichirField() {
        this.getFellows().each { co ->
            if(co.getId() != null && co.getId().startsWith("field")) {
                def binder = new AnnotateDataBinder(co)
                binder.loadAll()
            }
        }
    }
	/**
	* Rafrichier la liste des ${lowerNomClass}
	**/
    def rafraichirList() {
        ${lowerNomClass}s = ${currentModelElement.name}.list()
        def binder = new AnnotateDataBinder(this.getFellow("lst${currentModelElement.name}"))
        binder.loadAll()		
		<%
		getAssociationEnds(model, currentModelElement).each { sourceEnd ->
			def association = sourceEnd.association
			def targetEnd = association.connection.find { end -> end != sourceEnd }
			if (targetEnd.isNavigable()) {
				def attributeTypes = getEndType(targetEnd).tokenize('.')
				def targetType = attributeTypes[attributeTypes.size() - 1]
				def targetName = getEndName(targetEnd)				
				if (isOneToOne(sourceEnd, targetEnd)) {  								
		%>		
		<%
				}                 
				if (isOneToMany(sourceEnd, targetEnd)) {   
					def nomClassDest1 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		${targetName} = ${nomClassDest1}.list()		
		<%			
				}                 
				if (isManyToOne(sourceEnd, targetEnd)) { 
					def typeClassDest_tab = targetType.tokenize('.')
		%>		
		<%			
				}
				if (isManyToMany(sourceEnd, targetEnd)) {   
					def nomClassDest2 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		${targetName} = ${nomClassDest2}.list()
		<%				
				}
			} 
		}
		%>		
        annulerSelection()
    }
	/**
	* Basculer en mode saisi d'un nouveau élément
	**/
    def annulerSelection() {
        this.getFellow("lst${currentModelElement.name}").clearSelection()
        ${lowerNomClass}Selected = null
    }
	
	/**
	* Fonction qui gère l'initialisation des listes d'associations au niveau du constructeur
	**/
	def initialiserAssociation() {
		<%
		getAssociationEnds(model, currentModelElement).each { sourceEnd ->
			def association = sourceEnd.association
			def targetEnd = association.connection.find { end -> end != sourceEnd }
			if (targetEnd.isNavigable()) {
				def attributeTypes = getEndType(targetEnd).tokenize('.')
				def targetType = attributeTypes[attributeTypes.size() - 1]
				def targetName = getEndName(targetEnd)				
				if (isOneToOne(sourceEnd, targetEnd)) {  								
		%>
		${targetName}s = ${targetType}.list()		
		if(${targetName}s.size() > 0)
			${targetName}Selected = ${targetName}s.get(0)
		else
			${targetName}Selected = null
		<%
				}                 
				if (isOneToMany(sourceEnd, targetEnd)) {   
					def nomClassDest1 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		${targetName} = ${nomClassDest1}.list()
		${targetName}Selected = null// = new ArrayList()
		<%			
				}                 
				if (isManyToOne(sourceEnd, targetEnd)) { 
					def typeClassDest_tab = targetType.tokenize('.')
		%>
		${targetName}s = ${typeClassDest_tab[typeClassDest_tab.size() - 1]}.list()		
		if(${targetName}s.size() > 0)
			${targetName}Selected = ${targetName}s.get(0)
		else
			${targetName}Selected = null
		<%			
				}
				if (isManyToMany(sourceEnd, targetEnd)) {   
					def nomClassDest2 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		${targetName} = ${nomClassDest2}.list()
		${targetName}Selected = null// = new ArrayList()
		<%				
				}
			} 
		}
		%>
	}
	/**
	* Fonction qui permet de ré-initaliser l'association au niveau de l'interface
	* @param del si c'est une réinitionalisation après une suppression ou non
	**/
	def reinitialiserAssociation(del) {
		<%
		getAssociationEnds(model, currentModelElement).each { sourceEnd ->
			def association = sourceEnd.association
			def targetEnd = association.connection.find { end -> end != sourceEnd }
			if (targetEnd.isNavigable()) {
				def attributeTypes = getEndType(targetEnd).tokenize('.')
				def targetType = attributeTypes[attributeTypes.size() - 1]
				def targetName = getEndName(targetEnd)				
				if (isOneToOne(sourceEnd, targetEnd)) {  								
		%>
		if(del) {
			${targetName}s = ${targetType}.list()
		}		
		if(${targetName}s.size() > 0)
			${targetName}Selected = ${targetName}s.get(0)
		else
			${targetName}Selected = null
		<%
				}                 
				if (isOneToMany(sourceEnd, targetEnd)) {   
					def nomClassDest1 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		if(del) {
			${targetName} = ${nomClassDest1}.list()
		}
		this.getFellow("lst${targetName}").clearSelection()
		${targetName}Selected = null// = new ArrayList()
		<%			
				}                 
				if (isManyToOne(sourceEnd, targetEnd)) { 
					def typeClassDest_tab = targetType.tokenize('.')
		%>	
		if(del) {
			${targetName}s = ${targetType}.list()
		}	
		if(${targetName}s.size() > 0)
			${targetName}Selected = ${targetName}s.get(0)
		else
			${targetName}Selected = null
		<%			
				}
				if (isManyToMany(sourceEnd, targetEnd)) {   
					def nomClassDest2 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>	
		if(del) {
			${targetName} = ${nomClassDest2}.list()
		}
		this.getFellow("lst${targetName}").clearSelection()
		${targetName}Selected = null// = new ArrayList()
		<%				
				}
			} 
		}
		%>
	}
	/**
	* Fonction qui copie la valeur de l'association à l'élément courant
	**/
	def actualiserValeurAssociation() {
		<%
		getAssociationEnds(model, currentModelElement).each { sourceEnd ->
			def association = sourceEnd.association
			def targetEnd = association.connection.find { end -> end != sourceEnd }
			if (targetEnd.isNavigable()) {
				def attributeTypes = getEndType(targetEnd).tokenize('.')
				def targetType = attributeTypes[attributeTypes.size() - 1]
				def targetName = getEndName(targetEnd)				
				if (isOneToOne(sourceEnd, targetEnd)) {  								
		%>		
		${lowerNomClass}.${targetName} = ${targetName}Selected
		if(${targetName}s.size() > 0) {
			def binder${targetName} = new AnnotateDataBinder(this.getFellow("co${targetName}s"))
			${targetName}Selected = ${targetName}s.get(0)
			binder${targetName}.loadAll()
		}
		else
			${targetName}Selected = null
		<%
				}                 
				if (isOneToMany(sourceEnd, targetEnd)) {   
					def nomClassDest1 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		${lowerNomClass}.${targetName} = ${targetName}Selected
		this.getFellow("lst${targetName}").clearSelection()
		${targetName}Selected = null// = new ArrayList()
		<%			
				}                 
				if (isManyToOne(sourceEnd, targetEnd)) { 
					def typeClassDest_tab = targetType.tokenize('.')
		%>		
		${lowerNomClass}.${targetName} = ${targetName}Selected
		if(${targetName}s.size() > 0) {
			def binder${targetName} = new AnnotateDataBinder(this.getFellow("co${targetName}s"))
			${targetName}Selected = ${targetName}s.get(0)
			binder${targetName}.loadAll()
		}
		else
			${targetName}Selected = null
		<%			
				}
				if (isManyToMany(sourceEnd, targetEnd)) {   
					def nomClassDest2 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>	
		${lowerNomClass}.${targetName} = ${targetName}Selected
		this.getFellow("lst${targetName}").clearSelection()
		${targetName}Selected = null// = new ArrayList()
		<%				
				}
			} 
		}
		%>
	}
	/**
	* Fonction qui fait la liaison entre l'association l'élément selectionné et la liste dans le crud
	**/
	def afficherValeurAssociation() {
		<%
		getAssociationEnds(model, currentModelElement).each { sourceEnd ->
			def association = sourceEnd.association
			def targetEnd = association.connection.find { end -> end != sourceEnd }
			if (targetEnd.isNavigable()) {
				def attributeTypes = getEndType(targetEnd).tokenize('.')
				def targetType = attributeTypes[attributeTypes.size() - 1]
				def targetName = getEndName(targetEnd)				
				if (isOneToOne(sourceEnd, targetEnd)) {  								
		%>						
		def binder${targetName} = new AnnotateDataBinder(this.getFellow("co${targetName}s"))
		${targetName}Selected = ${targetName}s.find{ it.id == ${currentModelElement.name}.findById(${lowerNomClass}.id).${targetName}.id }
        binder${targetName}.loadAll()
		<%
				}                 
				if (isOneToMany(sourceEnd, targetEnd)) {   
					def nomClassDest1 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		def binder${targetName} = new AnnotateDataBinder(this.getFellow("lst${targetName}"))
		${targetName}Selected = ${lowerNomClass}Selected.${targetName}
        binder${targetName}.loadAll()
		<%			
				}                 
				if (isManyToOne(sourceEnd, targetEnd)) { 
					def typeClassDest_tab = targetType.tokenize('.')
		%>		
		def binder${targetName} = new AnnotateDataBinder(this.getFellow("co${targetName}s"))
		${targetName}Selected = ${targetName}s.find{ it.id == ${currentModelElement.name}.findById(${lowerNomClass}.id).${targetName}.id }
        binder${targetName}.loadAll()
		<%			
				}
				if (isManyToMany(sourceEnd, targetEnd)) {   
					def nomClassDest2 = (firstCharUpper(targetName) + 'oso') - 'soso'
		%>
		def binder${targetName} = new AnnotateDataBinder(this.getFellow("lst${targetName}"))
		${targetName}Selected = ${lowerNomClass}Selected.${targetName}
        binder${targetName}.loadAll()		
		<%				
				}
			} 
		}
		%>
	}
}

