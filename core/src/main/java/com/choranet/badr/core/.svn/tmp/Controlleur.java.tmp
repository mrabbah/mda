/*
Copyright CHORA INFORMATIQUE 2010-2011
 */
package com.choranet.badr.core;

import com.choranet.badr.core.commandrunner.CommandRunner;
import com.choranet.badr.core.dto.CoreToViewDTO;
import com.choranet.badr.core.dto.ViewToCoreDTO;
import com.choranet.badr.core.groovymda.GroovyMDA;
import com.choranet.badr.core.groovymda.ProcessorEnum;
import com.choranet.badr.core.commandrunner.RunCommandStatusEnum;
import com.choranet.badr.core.model.Attribut;
import com.choranet.badr.core.model.Clazz;
import com.choranet.badr.core.model.commande.CommandesDatabase;
import com.choranet.badr.core.model.commande.BriquesTechniquesCommandes;
import com.choranet.badr.core.model.commande.GeneralGrailsCommandes;
import com.choranet.badr.core.model.commande.ScaffoldingCommandes;
import com.choranet.badr.core.transformer.FileTransformer;
import java.io.File;
import java.util.Iterator;
import java.util.List;

/**
 * @Description Controlleur
 * @version 1.0-SNAPSHOT
 * @date 20 f√©vr. 2011
 * @author rabbah
 */
public class Controlleur {

    private CoreToViewDTO coreToViewDTO;
    private ViewToCoreDTO viewToCoreDTO;
    private GroovyMDA groovyMDA;
    private static final String FS = System.getProperty("file.separator");

    public Controlleur(ViewToCoreDTO viewToCoreDTO) throws Exception {
        if (viewToCoreDTO == null) {
            throw new Exception("View To Core DTO cannot be null");
        }
        this.viewToCoreDTO = viewToCoreDTO;        
        if (viewToCoreDTO.getXmiFile() == null) {
            throw new Exception("Xmi File cannot be null");
        }
        groovyMDA = new GroovyMDA(viewToCoreDTO.getXmiFile().getAbsolutePath());
        List<Clazz> classes = groovyMDA.getClasses();
        if (classes == null || classes.isEmpty()) {
            throw new Exception("Aucune classes trouve dans ton fichier xmi");
        }
        coreToViewDTO = new CoreToViewDTO();
        coreToViewDTO.getClazzs().addAll(classes);
    }

    public void creerGrailsProjet() throws Exception {
        try {
            String commandCreateProjet = CommandesDatabase.generalGrailsCommandesDb.get(GeneralGrailsCommandes.CREATEPROJECT)
                    + viewToCoreDTO.getProjectName();
            RunCommandStatusEnum status = CommandRunner.run(commandCreateProjet, viewToCoreDTO.getOutputDirectory());
            if (status == RunCommandStatusEnum.ECHEC) {
                throw new Exception("Echec de la creation du projet");
            }
        } catch (Exception exception) {
            throw exception;
        }
    }

    public void installerLesBriquesTechniques() throws Exception {
        try {
            List<BriquesTechniquesCommandes> bts = viewToCoreDTO.getBriquesTechniques();
            String commandes[] = new String[bts.size() + 1];
            int compteur = 0;
            for (Iterator<BriquesTechniquesCommandes> it = bts.iterator(); it.hasNext();) {
                BriquesTechniquesCommandes bt = it.next();
                commandes[compteur++] = CommandesDatabase.briquesTechniquesCommandesDb.get(bt);
            }
            File projectDirectory = new File(viewToCoreDTO.getOutputDirectory()
                    + FS
                    + viewToCoreDTO.getProjectName());
            if (!projectDirectory.exists()) {
                throw new Exception("Le rÈpertoire du projet n'exite pas");
            }
            if (!projectDirectory.canWrite()) {
                throw new Exception("Vous n'avez pas les droits d'√©criture sur le rÈpertoire du projet");
            }
            RunCommandStatusEnum status = CommandRunner.run(commandes, projectDirectory);
            if (status == RunCommandStatusEnum.ECHEC) {
                throw new Exception("Echec de l'installation des briques techniques");
            }
        } catch (Exception exception) {
            throw exception;
        }

    }

    public void genererGormDomainClasses() throws Exception {
        try {
            File projectDirectory = new File(viewToCoreDTO.getOutputDirectory()
                    + FS
                    + viewToCoreDTO.getProjectName());
            if (!projectDirectory.exists()) {
                throw new Exception("Le r√©pertoire du projet n'exite pas");
            }
            if (!projectDirectory.canWrite()) {
                throw new Exception("Vous n'avez pas les droits d'√©criture sur le r√©p√©rtoire du projet");
            }
            groovyMDA.lunchProcessor(projectDirectory, ProcessorEnum.GORM);
        } catch (Exception exception) {
            throw exception;
        }
    }

    public void lancerScaffoldingGrails() throws Exception {
        try {
            File projectDirectory = new File(viewToCoreDTO.getOutputDirectory()
                    + FS
                    + viewToCoreDTO.getProjectName());
            if (!projectDirectory.exists()) {
                throw new Exception("Le r√©pertoire du projet n'exite pas");
            }
            if (!projectDirectory.canWrite()) {
                throw new Exception("Vous n'avez pas les droits d'√©criture sur le r√©p√©rtoire du projet");
            }
            List<Clazz> classToScaffold = viewToCoreDTO.getClassToScaffold();
            String commandes[] = new String[classToScaffold.size() + 1];
            int compt = 0;
            for (Iterator<Clazz> it = classToScaffold.iterator(); it.hasNext();) {
                Clazz clazz = it.next();
                commandes[compt++] = CommandesDatabase.scaffoldingCommandesDb.get(ScaffoldingCommandes.GENERATEALLGRAILS)
                        + clazz.getPackageName()
                        + "." + clazz.getNom();
            }
            RunCommandStatusEnum status = CommandRunner.run(commandes, projectDirectory);
            if (status == RunCommandStatusEnum.ECHEC) {
                throw new Exception("Echec de l'installation des briques techniques");
            }
        } catch (Exception exception) {
            throw exception;
        }
    }

    public void lancerScaffoldingOpenLaszlo() throws Exception {
        try {
            File projectDirectory = new File(viewToCoreDTO.getOutputDirectory()
                    + FS
                    + viewToCoreDTO.getProjectName());
            if (!projectDirectory.exists()) {
                throw new Exception("Le r√©pertoire du projet n'exite pas");
            }
            if (!projectDirectory.canWrite()) {
                throw new Exception("Vous n'avez pas les droits d'√©criture sur le r√©p√©rtoire du projet");
            }
            List<Clazz> classToScaffold = viewToCoreDTO.getClassToScaffold();
            String commandes[] = new String[classToScaffold.size() + 1];
            int compt = 0;
            for (Iterator<Clazz> it = classToScaffold.iterator(); it.hasNext();) {
                Clazz clazz = it.next();
                commandes[compt++] = CommandesDatabase.scaffoldingCommandesDb.get(ScaffoldingCommandes.GENERATELASZLO)
                        + clazz.getPackageName()
                        + "." + clazz.getNom();
            }
            RunCommandStatusEnum status = CommandRunner.run(commandes, projectDirectory);
            if (status == RunCommandStatusEnum.ECHEC) {
                throw new Exception("Echec de l'installation des briques techniques");
            }
        } catch (Exception exception) {
            throw exception;
        }
    }

    public void lancerScaffoldingZk() throws Exception {
        //TODO controler les classes qu'on veut generer leurs interfaces.
        try {
            File projectDirectory = new File(viewToCoreDTO.getOutputDirectory()
                    + FS
                    + viewToCoreDTO.getProjectName());
            if (!projectDirectory.exists()) {
                throw new Exception("Le r√©pertoire du projet n'exite pas");
            }
            if (!projectDirectory.canWrite()) {
                throw new Exception("Vous n'avez pas les droits d'√©criture sur le r√©p√©rtoire du projet");
            }
            groovyMDA.lunchProcessor(projectDirectory, ProcessorEnum.ZK);
        } catch (Exception exception) {
            throw exception;
        }
    }

    public void lancerScaffoldingFlex() throws Exception {
        try {
            File projectDirectory = new File(viewToCoreDTO.getOutputDirectory()
                    + FS
                    + viewToCoreDTO.getProjectName());
            if (!projectDirectory.exists()) {
                throw new Exception("Le r√©pertoire du projet n'exite pas");
            }
            if (!projectDirectory.canWrite()) {
                throw new Exception("Vous n'avez pas les droits d'√©criture sur le r√©p√©rtoire du projet");
            }
            List<Clazz> classToScaffold = viewToCoreDTO.getClassToScaffold();
            String commandes[] = new String[classToScaffold.size() + 1];
            int compt = 0;
            for (Iterator<Clazz> it = classToScaffold.iterator(); it.hasNext();) {
                Clazz clazz = it.next();
                commandes[compt++] = CommandesDatabase.scaffoldingCommandesDb.get(ScaffoldingCommandes.GENERATEALLFLEX)
                        + clazz.getPackageName()
                        + "." + clazz.getNom();
            }
            RunCommandStatusEnum status = CommandRunner.run(commandes, projectDirectory);
            if (status == RunCommandStatusEnum.ECHEC) {
                throw new Exception("Echec de l'installation des briques techniques");
            }
        } catch (Exception exception) {
            throw exception;
        }
    }

    public void lancerScaffoldingJSF() throws Exception {
        //TODO soufiane
    }

    public void ajouterGroovyContraintesClassDomaine() throws Exception {
        List<Clazz> classes = coreToViewDTO.getClazzs();
        String cheminRepertoireProjet = viewToCoreDTO.getOutputDirectory()
                + FS + viewToCoreDTO.getProjectName();
        for (Iterator<Clazz> it = classes.iterator(); it.hasNext();) {
            Clazz clazz = it.next();
            String cheminClass = cheminRepertoireProjet + FS
                    + clazz.getPackageName().replaceAll("\\.", FS)
                    + FS + clazz.getNom() + ".groovy";
            File domainClass = new File(cheminClass);
            
            List<Attribut> attributs = clazz.getAttributs();
            for (Iterator<Attribut> it1 = attributs.iterator(); it1.hasNext();) {
                Attribut attribut = it1.next();
                String attributNom = attribut.getNom();
                String contraintes = attribut.getContraintesAsString();
                FileTransformer.addContraintesToAttribut(domainClass, attributNom, contraintes);
            }
        }
    }

    public CoreToViewDTO getCoreToViewDTO() {
        return coreToViewDTO;
    }

    public ViewToCoreDTO getViewToCoreDTO() {
        return viewToCoreDTO;
    }
}
